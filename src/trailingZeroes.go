package src

// 计算给定数阶乘的尾数中 0 的个数。
// 尾数中 0 的个数可由分解式中 2 和 5 的对数来确定，
// 如 10!=(2*5)*(3*3)*(2*2*2)*7*(2*3)*5*(2*2)*3*2*1
// 可以看出每隔两个数就会出现 1 次以上的 2，而每隔五个数才会出现 1 次以上的 5,
// 所以总体来说 2 的个数是大于 5 的个数的。所以程序就转变为求 5 的个数。
// 小于一个数的数中可能包含非 0 的 5 的整数的个数可以由 n/5 来确定。

func TrailingZeroes(n int) int {
	var count int
	for n != 0 {
		count = count + n/5
		n /= 5
	}
	return count
}
